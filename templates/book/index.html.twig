{% extends 'base.html.twig' %}


{% block title %}Reservation
{% endblock %}


{% block body %}

	<section class="container">
		<div class="row">
			<div class="col">
				<h3>Reservez une table</h3>
				{{ form_start(bookForm, {'attr': {'id': 'monFormulaire'}}) }}
				<div id="erreur"></div>
				{{ form_row(bookForm.dateReservation) }}
				{{ form_row(bookForm.serviceType) }}

				{{ form_row(bookForm.hour) }}
				{{ form_row(bookForm.numberPeople) }}
				<h5 id="responseRequete"></h5>
				<h3>Remplir vos informations personnelles</h3>


				{{ form_row(bookForm.civility) }}
				{{ form_row(bookForm.firstname) }}
				{{ form_row(bookForm.name) }}
				{{ form_row(bookForm.phone) }}
				{{ form_row(bookForm.email) }}
				{{ form_row(bookForm.allergy) }}
				{{ form_row(bookForm.RGPDConsent) }}
				<button type="submit" id="submitBtn" class="btn btn-primary">Réserver</button>
				{{ form_end(bookForm) }}
			</div>
		</div>
	</section>

	<script>

		// Constantes pour les champs de saisie
const dateReservation = document.querySelector('#book_form_dateReservation');
const serviceType = document.querySelector('#book_form_serviceType');
const hour = document.querySelector('#book_form_hour');
const numberPeople = document.querySelector('#book_form_numberPeople');


// code instable -- -- -- -- -- -- -


// code instable --------------------


// Désactiver les champs service, heure et nombre de personnes
serviceType.disabled = true;
hour.disabled = true;
numberPeople.disabled = true;

// Ajouter un écouteur d'événement pour le champ date
dateReservation.addEventListener('change', () => { // Vérifier si la date est valide
if (dateReservation.value !== '') { // Activer le champ service et le rendre obligatoire
serviceType.disabled = false;
serviceType.required = true;
serviceType.focus();
}
});

// Ajouter un écouteur d'événement pour le champ service
serviceType.addEventListener('change', () => { // Vérifier si le service est sélectionné
if (serviceType.value !== '') { // Activer le champ heure et le rendre obligatoire
hour.disabled = false;
hour.required = true;
hour.focus();
}
});

// Ajouter un écouteur d'événement pour le champ heure
hour.addEventListener('change', () => { // Vérifier si l'heure est sélectionnée
if (hour.value !== '') { // Activer le champ nombre de personnes et le rendre obligatoire
numberPeople.disabled = false;
numberPeople.required = true;
numberPeople.focus();
}
});

// Ajouter un écouteur d'événement pour le formulaire
const bookingForm = document.getElementById('monFormulaire');
bookingForm.addEventListener('submit', () => { // Vérifier si tous les champs sont remplis
if (dateReservation.value === '' || serviceType.value === '' || hour.value === '' || numberPeople.value === '') {

alert('Veuillez remplir tous les champs avant de soumettre le formulaire.');
event.preventDefault(); // Empêcher l'envoi du formulaire
}
});


// Affichage des horaires pour Lunch ou Dinner
const hoursByService = {
'lunch': [
'12:00',
'12:15',
'12:30',
'12:45',
'13:00'
],
'dinner': [
'19:00',
'19:15',
'19:30',
'19:45',
'20:00'
]
};

// Ajouter un événement d'écoute sur le champ de saisie du service
serviceType.addEventListener('change', event => { // Récupérer les horaires correspondant au service sélectionné
const selectedService = event.target.value;
const hours = hoursByService[selectedService];

// Vider les options actuelles du champ de saisie de l'heure
hour.innerHTML = '';

// Générer les options pour chaque heure disponible
hours.forEach(time => {
const option = document.createElement('option');
option.value = time;
option.textContent = time;
hour.appendChild(option);
});
});


// // Calendrier flatpickr
// const dateReservation = document.querySelector('#book_form_dateReservation');

flatpickr(dateReservation, {
locale: "fr",

dateFormat: "d-m-Y",


minDate: 'today',
disable: [function (date) {
return(date.getDay() === 1 || date.getDay() === 2 || date.getDay() === 3);
}
]
});


// Request API Fetch
const responseRequete = document.getElementById('responseRequete')
const submitBtn = document.querySelector('#submitBtn');
const erreur = document.querySelector('#erreur');

// // fonction pour réinitialiser le nombre de personnes
function resetNumberPeople() {
numberPeople.value = '';
responseRequete.textContent = '';
}
// écouter les changements de service et de date
serviceType.addEventListener('change', () => {
resetNumberPeople();
});

dateReservation.addEventListener('change', () => {
resetNumberPeople();
});

numberPeople.addEventListener('change', () => { // console.log(document.querySelector('#monFormulaire'))
fetch(`/reservation/check-availability/${
serviceType.value
}/${
dateReservation.value
}/${
numberPeople.value
}`).then(res => res.json()).then(ret => { // console.log(monFormulaire)
console.log(ret);

// console.log(serviceType.value);
if (ret.isFull === true) {
responseRequete.textContent = "Désolé, il ne reste plus de place pour cette date, choisissez une autre date.";
submitBtn.disabled = true; // désactiver le bouton "submit"
} else {
responseRequete.textContent = "La réservation est possible pour cette date";
submitBtn.disabled = false; // activer le bouton "submit"
}
}).catch(error => {
console.error(error);
document.querySelector('#erreur').textContent = "Une erreur est survenue lors de la vérification de la disponibilité.";
});
})
	</script>


{% endblock %}
